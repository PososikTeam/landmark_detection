import pytest


import sys
sys.path.insert(0, '../')

from landmark_detection.landmark_detector import LandmarkDetector
import numpy as np
import cv2

#!!!ATTENTION!!!
#for testing this you must to add lib with san.pth in path of /landmark_detection

def test_model_err():
    detector = LandmarkDetector(20, path='../lib/san.pth')
    assert detector.err_message != ''


def test_box_err():
    detector = LandmarkDetector(path='../lib/san.pth')
    img = np.zeros((224, 224, 3))

    test_boxes = [[-1,3, 20, 21], ['lolik', 3, 5, 11], [1, 2], None, [100, 20, 10, 28], [100, 20, 10, 28], [10, 200, 20, 35], [300, 500, 800, 900]]
    for box in test_boxes:
        inpud_dict = {'image' : img, 'box' : box}
        detector.predict(inpud_dict)
        assert detector.err_message != ''
        detector.err_message = ''



def test_img_err():
    detector = LandmarkDetector(path='../lib/san.pth')
    box = [0, 0, 1, 1]

    zero = np.zeros((30, 30, 3))

    zero_with_negative = zero.copy()
    zero_with_negative[0,0,0] = -10



    zero_with_max_value = zero.copy()
    zero_with_max_value[0,0,0] = 300

    zero_with_float = zero.copy()
    zero_with_float[0,0,0] = 3.3


    images = [None, zero_with_negative,  zero_with_max_value, zero_with_float, np.array([1,1,1])]
    for img in images:
        inpud_dict = {'image' : img, 'box' : box}
        detector.predict(inpud_dict)
        assert detector.err_message != ''
        detector.err_message = ''


def test_model_answ_crorrect():
    detector = LandmarkDetector(path='../lib/san.pth')
    img = cv2.cvtColor(cv2.imread('../landmark_detection/img.png'), cv2.COLOR_BGR2RGB)

    box = [200, 10, 580, 500]
    input_dict = {'image' : img, 'box' : box}
    answ_dict = detector.predict(input_dict)

    assert answ_dict['error_message'] == ''

    real_answ = np.array([[2.58017212e+02, 2.28198227e+02, 6.56637073e-01],
                            [2.59769714e+02, 2.67464172e+02, 4.70025748e-01],
                            [2.61701965e+02, 3.08814758e+02, 6.18100941e-01],
                            [2.64941254e+02, 3.44869293e+02, 7.14898527e-01],
                            [2.72837067e+02, 3.84657257e+02, 7.50634491e-01],
                            [2.88244507e+02, 4.15857300e+02, 5.58845162e-01],
                            [3.11373932e+02, 4.37996704e+02, 6.56266093e-01],
                            [3.39118225e+02, 4.56371216e+02, 6.71741605e-01],
                            [3.63341064e+02, 4.64118683e+02, 5.52150786e-01],
                            [3.95973694e+02, 4.58770721e+02, 7.12142050e-01],
                            [4.19518677e+02, 4.38851440e+02, 4.69577461e-01],
                            [4.48594391e+02, 4.23260162e+02, 6.51212752e-01],
                            [4.72056427e+02, 3.99533203e+02, 6.73570275e-01],
                            [4.86586700e+02, 3.62108765e+02, 5.23925245e-01],
                            [4.96080566e+02, 3.28378662e+02, 7.72182822e-01],
                            [5.03432037e+02, 2.87238892e+02, 4.09012049e-01],
                            [5.06007751e+02, 2.52677597e+02, 7.05530703e-01],
                            [2.79405518e+02, 2.15852493e+02, 5.04377484e-01],
                            [2.92180695e+02, 1.99197052e+02, 8.67679834e-01],
                            [3.16930634e+02, 1.92629257e+02, 7.14800119e-01],
                            [3.41220215e+02, 1.97985016e+02, 6.68207169e-01],
                            [3.59160461e+02, 2.10513962e+02, 5.76833785e-01],
                            [3.93316223e+02, 2.09396362e+02, 7.10720778e-01],
                            [4.18032471e+02, 2.00548874e+02, 8.11850429e-01],
                            [4.40850250e+02, 1.99765930e+02, 7.07358658e-01],
                            [4.63219788e+02, 2.10068481e+02, 4.94507700e-01],
                            [4.77030365e+02, 2.29441437e+02, 7.89739072e-01],
                            [3.76769501e+02, 2.33158646e+02, 7.51989722e-01],
                            [3.75080688e+02, 2.55215042e+02, 8.63810420e-01],
                            [3.73770935e+02, 2.79696655e+02, 9.10421073e-01],
                            [3.71926361e+02, 3.05367920e+02, 9.10312235e-01],
                            [3.48869019e+02, 3.22677063e+02, 8.78063917e-01],
                            [3.61966614e+02, 3.26182220e+02, 6.65093303e-01],
                            [3.71389221e+02, 3.30933746e+02, 9.62388933e-01],
                            [3.82778961e+02, 3.27665253e+02, 8.36483955e-01],
                            [3.95722015e+02, 3.24559875e+02, 9.25387204e-01],
                            [3.02751221e+02, 2.34044312e+02, 6.64683044e-01],
                            [3.18727234e+02, 2.25019241e+02, 7.36870766e-01],
                            [3.33452820e+02, 2.26405396e+02, 9.67555881e-01],
                            [3.44351868e+02, 2.35989563e+02, 5.98598957e-01],
                            [3.32266266e+02, 2.38914352e+02, 7.18006194e-01],
                            [3.17117798e+02, 2.37998672e+02, 5.70674062e-01],
                            [4.05045654e+02, 2.42561554e+02, 7.20458329e-01],
                            [4.19197968e+02, 2.34636383e+02, 5.17246246e-01],
                            [4.35654388e+02, 2.35832840e+02, 6.88098252e-01],
                            [4.47625824e+02, 2.44206329e+02, 8.10325205e-01],
                            [4.35443451e+02, 2.48504593e+02, 8.48511636e-01],
                            [4.19384583e+02, 2.47305374e+02, 5.81537187e-01],
                            [3.22027618e+02, 3.68914551e+02, 6.07293427e-01],
                            [3.41286163e+02, 3.63598724e+02, 4.72639203e-01],
                            [3.60805634e+02, 3.62204224e+02, 4.73138750e-01],
                            [3.68245483e+02, 3.64503265e+02, 6.65106773e-01],
                            [3.79171906e+02, 3.64034027e+02, 4.40403014e-01],
                            [3.96048431e+02, 3.67036652e+02, 7.41977632e-01],
                            [4.10918579e+02, 3.76858032e+02, 9.11278665e-01],
                            [3.95442444e+02, 3.91751770e+02, 5.38112998e-01],
                            [3.80871643e+02, 3.93902985e+02, 5.14768183e-01],
                            [3.66996765e+02, 3.94097015e+02, 7.65318930e-01],
                            [3.56161255e+02, 3.92529755e+02, 6.04622245e-01],
                            [3.37617737e+02, 3.87191132e+02, 5.10835052e-01],
                            [3.30656128e+02, 3.70841461e+02, 7.97693729e-01],
                            [3.59365753e+02, 3.76117889e+02, 7.53325760e-01],
                            [3.67983002e+02, 3.78348206e+02, 9.47001159e-01],
                            [3.81602081e+02, 3.77239746e+02, 6.42214119e-01],
                            [4.02123871e+02, 3.78023285e+02, 8.11634839e-01],
                            [3.81785065e+02, 3.77862915e+02, 6.46092355e-01],
                            [3.67754456e+02, 3.78060699e+02, 9.74451661e-01],
                            [3.57977966e+02, 3.76125732e+02, 7.55273879e-01]])

    mse = np.sum(np.sqrt(((real_answ - answ_dict['landmarks'])**2).sum(axis=-1)))

    assert mse < 2